                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4d807000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f65805000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f75003000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
                            | 	#xorq %rax,%rax				# count = 0;
0x032: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx
0x03c: 72b401000000000000   | 	jl	Less8
                            | 
0x045:                      | Loop:	
0x045: 50a70000000000000000 | 	mrmovq (%rdi), %r10		# read val from src...
0x04f: 40a60000000000000000 | 	rmmovq %r10, (%rsi)		# ...and store it to dst
0x059: 62aa                 | 	andq %r10, %r10			# val <= 0?
0x05b: 716e00000000000000   | 	jle L1
0x064: c0f00100000000000000 | 	iaddq $1, %rax     
0x06e:                      | L1:
0x06e: 50a70800000000000000 | 	mrmovq 8(%rdi), %r10	# read val from src...
0x078: 40a60800000000000000 | 	rmmovq %r10, 8(%rsi)	# ...and store it to dst
0x082: 62aa                 | 	andq %r10, %r10			# val <= 0?
0x084: 719700000000000000   | 	jle L2
0x08d: c0f00100000000000000 | 	iaddq $1, %rax  
0x097:                      | L2:
0x097: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val from src...
0x0a1: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x0ab: 62aa                 | 	andq %r10, %r10			# val <= 0?
0x0ad: 71c000000000000000   | 	jle L3
0x0b6: c0f00100000000000000 | 	iaddq $1, %rax  
0x0c0:                      | L3:
0x0c0: 50a71800000000000000 | 	mrmovq 24(%rdi), %r10	# read val from src...
0x0ca: 40a61800000000000000 | 	rmmovq %r10, 24(%rsi)	# ...and store it to dst
0x0d4: 62aa                 | 	andq %r10, %r10			# val <= 0?
0x0d6: 71e900000000000000   | 	jle L4
0x0df: c0f00100000000000000 | 	iaddq $1, %rax  
0x0e9:                      | L4:
0x0e9: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10	# read val from src...
0x0f3: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)	# ...and store it to dst
0x0fd: 62aa                 | 	andq %r10, %r10			# val <= 0?
0x0ff: 711201000000000000   | 	jle L5
0x108: c0f00100000000000000 | 	iaddq $1, %rax  
0x112:                      | L5:
0x112: 50a72800000000000000 | 	mrmovq 40(%rdi), %r10	# read val from src...
0x11c: 40a62800000000000000 | 	rmmovq %r10, 40(%rsi)	# ...and store it to dst
0x126: 62aa                 | 	andq %r10, %r10			# val <= 0?
0x128: 713b01000000000000   | 	jle L6
0x131: c0f00100000000000000 | 	iaddq $1, %rax  
0x13b:                      | L6:
0x13b: 50a73000000000000000 | 	mrmovq 48(%rdi), %r10	# read val from src...
0x145: 40a63000000000000000 | 	rmmovq %r10, 48(%rsi)	# ...and store it to dst
0x14f: 62aa                 | 	andq %r10, %r10			# val <= 0?
0x151: 716401000000000000   | 	jle L7
0x15a: c0f00100000000000000 | 	iaddq $1, %rax  
0x164:                      | L7:
0x164: 50a73800000000000000 | 	mrmovq 56(%rdi), %r10	# read val from src...
0x16e: 40a63800000000000000 | 	rmmovq %r10, 56(%rsi)	# ...and store it to dst
0x178: 62aa                 | 	andq %r10, %r10			# val <= 0?
0x17a: 718d01000000000000   | 	jle Test
0x183: c0f00100000000000000 | 	iaddq $1, %rax  
0x18d:                      | Test:
0x18d: c0f74000000000000000 | 	iaddq $64, %rdi			# src+=8
0x197: c0f64000000000000000 | 	iaddq $64, %rsi			# dst+=8
0x1a1: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx			# len-=8
0x1ab: 754500000000000000   | 	jge Loop			    # if so, goto Loop:
                            | 
0x1b4:                      | Less8:
0x1b4: c0f20400000000000000 | 	iaddq $4, %rdx
0x1be: 72f501000000000000   | 	jl Less4
0x1c7: 73a802000000000000   | 	je Len4
0x1d0: c0f2feffffffffffffff | 	iaddq $-2, %rdx
0x1da: 727f02000000000000   | 	jl Len5
0x1e3: 735602000000000000   | 	je Len6
0x1ec: 702d02000000000000   | 	jmp Len7
                            | 
0x1f5:                      | Less4:
0x1f5: c0f20300000000000000 | 	iaddq $3, %rdx
0x1ff: 732303000000000000   | 	je Len1
0x208: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x212: 73fa02000000000000   | 	je Len2
0x21b: 76d102000000000000   | 	jg Len3
0x224: 704c03000000000000   | 	jmp Done
                            | 
0x22d:                      | Len7:
0x22d: 50a73000000000000000 | 	mrmovq 48(%rdi), %r10		# read val from src...
0x237: 40a63000000000000000 | 	rmmovq %r10, 48(%rsi)		# ...and store it to dst  
0x241: 62aa                 | 	andq %r10, %r10				# val <= 0?
0x243: 715602000000000000   | 	jle Len6
0x24c: c0f00100000000000000 | 	iaddq $1, %rax 
                            | 
0x256:                      | Len6:
0x256: 50a72800000000000000 | 	mrmovq 40(%rdi), %r10	# read val from src...
0x260: 40a62800000000000000 | 	rmmovq %r10, 40(%rsi)	# ...and store it to dst
0x26a: 62aa                 | 	andq %r10, %r10				# val <= 0?
0x26c: 717f02000000000000   | 	jle Len5
0x275: c0f00100000000000000 | 	iaddq $1, %rax 
                            | 
0x27f:                      | Len5:
0x27f: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10	# read val from src...
0x289: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)	# ...and store it to dst
0x293: 62aa                 | 	andq %r10, %r10				# val <= 0?
0x295: 71a802000000000000   | 	jle Len4
0x29e: c0f00100000000000000 | 	iaddq $1, %rax 
                            | 
0x2a8:                      | Len4:
0x2a8: 50a71800000000000000 | 	mrmovq 24(%rdi), %r10	# read val from src...
0x2b2: 40a61800000000000000 | 	rmmovq %r10, 24(%rsi)	# ...and store it to dst
0x2bc: 62aa                 | 	andq %r10, %r10				# val <= 0?
0x2be: 71d102000000000000   | 	jle Len3
0x2c7: c0f00100000000000000 | 	iaddq $1, %rax 
                            | 
0x2d1:                      | Len3:
0x2d1: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val from src...
0x2db: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x2e5: 62aa                 | 	andq %r10, %r10				# val <= 0?
0x2e7: 71fa02000000000000   | 	jle Len2
0x2f0: c0f00100000000000000 | 	iaddq $1, %rax 
                            | 
0x2fa:                      | Len2:
0x2fa: 50a70800000000000000 | 	mrmovq 8(%rdi), %r10	# read val from src...
0x304: 40a60800000000000000 | 	rmmovq %r10, 8(%rsi)	# ...and store it to dst
0x30e: 62aa                 | 	andq %r10, %r10				# val <= 0?
0x310: 712303000000000000   | 	jle Len1
0x319: c0f00100000000000000 | 	iaddq $1, %rax 
                            | 
0x323:                      | Len1:
0x323: 50a70000000000000000 | 	mrmovq (%rdi), %r10		# read val from src...
0x32d: 40a60000000000000000 | 	rmmovq %r10, (%rsi)		# ...and store it to dst
0x337: 62aa                 | 	andq %r10, %r10				# val <= 0?
0x339: 714c03000000000000   | 	jle Done
0x342: c0f00100000000000000 | 	iaddq $1, %rax 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x34c:                      | Done:
0x34c: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x34d:                      | End:
                            | #/* $end ncopy-ys */
                            | 
                            | 
0x34d:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x350:                      | 	.align 8
0x350:                      | src:
0x350: 0100000000000000     | 	.quad 1
0x358: feffffffffffffff     | 	.quad -2
0x360: fdffffffffffffff     | 	.quad -3
0x368: 0400000000000000     | 	.quad 4
0x370: fbffffffffffffff     | 	.quad -5
0x378: 0600000000000000     | 	.quad 6
0x380: f9ffffffffffffff     | 	.quad -7
0x388: 0800000000000000     | 	.quad 8
0x390: 0900000000000000     | 	.quad 9
0x398: f6ffffffffffffff     | 	.quad -10
0x3a0: 0b00000000000000     | 	.quad 11
0x3a8: 0c00000000000000     | 	.quad 12
0x3b0: 0d00000000000000     | 	.quad 13
0x3b8: f2ffffffffffffff     | 	.quad -14
0x3c0: 0f00000000000000     | 	.quad 15
0x3c8: f0ffffffffffffff     | 	.quad -16
0x3d0: efffffffffffffff     | 	.quad -17
0x3d8: eeffffffffffffff     | 	.quad -18
0x3e0: 1300000000000000     | 	.quad 19
0x3e8: ecffffffffffffff     | 	.quad -20
0x3f0: ebffffffffffffff     | 	.quad -21
0x3f8: 1600000000000000     | 	.quad 22
0x400: e9ffffffffffffff     | 	.quad -23
0x408: e8ffffffffffffff     | 	.quad -24
0x410: 1900000000000000     | 	.quad 25
0x418: e6ffffffffffffff     | 	.quad -26
0x420: e5ffffffffffffff     | 	.quad -27
0x428: e4ffffffffffffff     | 	.quad -28
0x430: e3ffffffffffffff     | 	.quad -29
0x438: 1e00000000000000     | 	.quad 30
0x440: 1f00000000000000     | 	.quad 31
0x448: 2000000000000000     | 	.quad 32
0x450: dfffffffffffffff     | 	.quad -33
0x458: 2200000000000000     | 	.quad 34
0x460: ddffffffffffffff     | 	.quad -35
0x468: dcffffffffffffff     | 	.quad -36
0x470: 2500000000000000     | 	.quad 37
0x478: daffffffffffffff     | 	.quad -38
0x480: d9ffffffffffffff     | 	.quad -39
0x488: d8ffffffffffffff     | 	.quad -40
0x490: d7ffffffffffffff     | 	.quad -41
0x498: d6ffffffffffffff     | 	.quad -42
0x4a0: 2b00000000000000     | 	.quad 43
0x4a8: d4ffffffffffffff     | 	.quad -44
0x4b0: 2d00000000000000     | 	.quad 45
0x4b8: d2ffffffffffffff     | 	.quad -46
0x4c0: d1ffffffffffffff     | 	.quad -47
0x4c8: d0ffffffffffffff     | 	.quad -48
0x4d0: 3100000000000000     | 	.quad 49
0x4d8: ceffffffffffffff     | 	.quad -50
0x4e0: 3300000000000000     | 	.quad 51
0x4e8: 3400000000000000     | 	.quad 52
0x4f0: 3500000000000000     | 	.quad 53
0x4f8: caffffffffffffff     | 	.quad -54
0x500: c9ffffffffffffff     | 	.quad -55
0x508: 3800000000000000     | 	.quad 56
0x510: 3900000000000000     | 	.quad 57
0x518: 3a00000000000000     | 	.quad 58
0x520: 3b00000000000000     | 	.quad 59
0x528: 3c00000000000000     | 	.quad 60
0x530: 3d00000000000000     | 	.quad 61
0x538: 3e00000000000000     | 	.quad 62
0x540: 3f00000000000000     | 	.quad 63
0x548: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x550:                      | 	.align 16
0x550:                      | Predest:
0x550: fadebc0000000000     | 	.quad 0xbcdefa
0x558:                      | dest:
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650: abefcd0000000000     | 	.quad 0xcdefab
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0: abefcd0000000000     | 	.quad 0xcdefab
0x6a8: abefcd0000000000     | 	.quad 0xcdefab
0x6b0: abefcd0000000000     | 	.quad 0xcdefab
0x6b8: abefcd0000000000     | 	.quad 0xcdefab
0x6c0: abefcd0000000000     | 	.quad 0xcdefab
0x6c8: abefcd0000000000     | 	.quad 0xcdefab
0x6d0: abefcd0000000000     | 	.quad 0xcdefab
0x6d8: abefcd0000000000     | 	.quad 0xcdefab
0x6e0: abefcd0000000000     | 	.quad 0xcdefab
0x6e8: abefcd0000000000     | 	.quad 0xcdefab
0x6f0: abefcd0000000000     | 	.quad 0xcdefab
0x6f8: abefcd0000000000     | 	.quad 0xcdefab
0x700: abefcd0000000000     | 	.quad 0xcdefab
0x708: abefcd0000000000     | 	.quad 0xcdefab
0x710: abefcd0000000000     | 	.quad 0xcdefab
0x718: abefcd0000000000     | 	.quad 0xcdefab
0x720: abefcd0000000000     | 	.quad 0xcdefab
0x728: abefcd0000000000     | 	.quad 0xcdefab
0x730: abefcd0000000000     | 	.quad 0xcdefab
0x738: abefcd0000000000     | 	.quad 0xcdefab
0x740: abefcd0000000000     | 	.quad 0xcdefab
0x748: abefcd0000000000     | 	.quad 0xcdefab
0x750:                      | Postdest:
0x750: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x758:                      | .align 8
                            | # Run time stack
0x758: 0000000000000000     | 	.quad 0
0x760: 0000000000000000     | 	.quad 0
0x768: 0000000000000000     | 	.quad 0
0x770: 0000000000000000     | 	.quad 0
0x778: 0000000000000000     | 	.quad 0
0x780: 0000000000000000     | 	.quad 0
0x788: 0000000000000000     | 	.quad 0
0x790: 0000000000000000     | 	.quad 0
0x798: 0000000000000000     | 	.quad 0
0x7a0: 0000000000000000     | 	.quad 0
0x7a8: 0000000000000000     | 	.quad 0
0x7b0: 0000000000000000     | 	.quad 0
0x7b8: 0000000000000000     | 	.quad 0
0x7c0: 0000000000000000     | 	.quad 0
0x7c8: 0000000000000000     | 	.quad 0
0x7d0: 0000000000000000     | 	.quad 0
                            | 
0x7d8:                      | Stack:
