                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f43004000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f68803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f75003000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
                            | 	#xorq %rax,%rax				# count = 0;
0x032: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx
0x03c: 72b401000000000000   | 	jl	Less8
                            | 
0x045:                      | Loop:	
0x045: 50a70000000000000000 | 	mrmovq (%rdi), %r10		# read val from src...
0x04f: 40a60000000000000000 | 	rmmovq %r10, (%rsi)		# ...and store it to dst
0x059: 62aa                 | 	andq %r10, %r10			# val <= 0?
0x05b: 716e00000000000000   | 	jle L1
0x064: c0f00100000000000000 | 	iaddq $1, %rax     
0x06e:                      | L1:
0x06e: 50a70800000000000000 | 	mrmovq 8(%rdi), %r10	# read val from src...
0x078: 40a60800000000000000 | 	rmmovq %r10, 8(%rsi)	# ...and store it to dst
0x082: 62aa                 | 	andq %r10, %r10			# val <= 0?
0x084: 719700000000000000   | 	jle L2
0x08d: c0f00100000000000000 | 	iaddq $1, %rax  
0x097:                      | L2:
0x097: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val from src...
0x0a1: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x0ab: 62aa                 | 	andq %r10, %r10			# val <= 0?
0x0ad: 71c000000000000000   | 	jle L3
0x0b6: c0f00100000000000000 | 	iaddq $1, %rax  
0x0c0:                      | L3:
0x0c0: 50a71800000000000000 | 	mrmovq 24(%rdi), %r10	# read val from src...
0x0ca: 40a61800000000000000 | 	rmmovq %r10, 24(%rsi)	# ...and store it to dst
0x0d4: 62aa                 | 	andq %r10, %r10			# val <= 0?
0x0d6: 71e900000000000000   | 	jle L4
0x0df: c0f00100000000000000 | 	iaddq $1, %rax  
0x0e9:                      | L4:
0x0e9: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10	# read val from src...
0x0f3: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)	# ...and store it to dst
0x0fd: 62aa                 | 	andq %r10, %r10			# val <= 0?
0x0ff: 711201000000000000   | 	jle L5
0x108: c0f00100000000000000 | 	iaddq $1, %rax  
0x112:                      | L5:
0x112: 50a72800000000000000 | 	mrmovq 40(%rdi), %r10	# read val from src...
0x11c: 40a62800000000000000 | 	rmmovq %r10, 40(%rsi)	# ...and store it to dst
0x126: 62aa                 | 	andq %r10, %r10			# val <= 0?
0x128: 713b01000000000000   | 	jle L6
0x131: c0f00100000000000000 | 	iaddq $1, %rax  
0x13b:                      | L6:
0x13b: 50a73000000000000000 | 	mrmovq 48(%rdi), %r10	# read val from src...
0x145: 40a63000000000000000 | 	rmmovq %r10, 48(%rsi)	# ...and store it to dst
0x14f: 62aa                 | 	andq %r10, %r10			# val <= 0?
0x151: 716401000000000000   | 	jle L7
0x15a: c0f00100000000000000 | 	iaddq $1, %rax  
0x164:                      | L7:
0x164: 50a73800000000000000 | 	mrmovq 56(%rdi), %r10	# read val from src...
0x16e: 40a63800000000000000 | 	rmmovq %r10, 56(%rsi)	# ...and store it to dst
0x178: 62aa                 | 	andq %r10, %r10			# val <= 0?
0x17a: 718d01000000000000   | 	jle Test
0x183: c0f00100000000000000 | 	iaddq $1, %rax  
0x18d:                      | Test:
0x18d: c0f74000000000000000 | 	iaddq $64, %rdi			# src+=8
0x197: c0f64000000000000000 | 	iaddq $64, %rsi			# dst+=8
0x1a1: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx			# len-=8
0x1ab: 754500000000000000   | 	jge Loop			    # if so, goto Loop:
                            | 
0x1b4:                      | Less8:
0x1b4: c0f20400000000000000 | 	iaddq $4, %rdx
0x1be: 72f501000000000000   | 	jl Less4
0x1c7: 73a802000000000000   | 	je Len4
0x1d0: c0f2feffffffffffffff | 	iaddq $-2, %rdx
0x1da: 727f02000000000000   | 	jl Len5
0x1e3: 735602000000000000   | 	je Len6
0x1ec: 702d02000000000000   | 	jmp Len7
                            | 
0x1f5:                      | Less4:
0x1f5: c0f20300000000000000 | 	iaddq $3, %rdx
0x1ff: 732303000000000000   | 	je Len1
0x208: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x212: 73fa02000000000000   | 	je Len2
0x21b: 76d102000000000000   | 	jg Len3
0x224: 704c03000000000000   | 	jmp Done
                            | 
0x22d:                      | Len7:
0x22d: 50a73000000000000000 | 	mrmovq 48(%rdi), %r10		# read val from src...
0x237: 40a63000000000000000 | 	rmmovq %r10, 48(%rsi)		# ...and store it to dst  
0x241: 62aa                 | 	andq %r10, %r10				# val <= 0?
0x243: 715602000000000000   | 	jle Len6
0x24c: c0f00100000000000000 | 	iaddq $1, %rax 
                            | 
0x256:                      | Len6:
0x256: 50a72800000000000000 | 	mrmovq 40(%rdi), %r10	# read val from src...
0x260: 40a62800000000000000 | 	rmmovq %r10, 40(%rsi)	# ...and store it to dst
0x26a: 62aa                 | 	andq %r10, %r10				# val <= 0?
0x26c: 717f02000000000000   | 	jle Len5
0x275: c0f00100000000000000 | 	iaddq $1, %rax 
                            | 
0x27f:                      | Len5:
0x27f: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10	# read val from src...
0x289: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)	# ...and store it to dst
0x293: 62aa                 | 	andq %r10, %r10				# val <= 0?
0x295: 71a802000000000000   | 	jle Len4
0x29e: c0f00100000000000000 | 	iaddq $1, %rax 
                            | 
0x2a8:                      | Len4:
0x2a8: 50a71800000000000000 | 	mrmovq 24(%rdi), %r10	# read val from src...
0x2b2: 40a61800000000000000 | 	rmmovq %r10, 24(%rsi)	# ...and store it to dst
0x2bc: 62aa                 | 	andq %r10, %r10				# val <= 0?
0x2be: 71d102000000000000   | 	jle Len3
0x2c7: c0f00100000000000000 | 	iaddq $1, %rax 
                            | 
0x2d1:                      | Len3:
0x2d1: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val from src...
0x2db: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x2e5: 62aa                 | 	andq %r10, %r10				# val <= 0?
0x2e7: 71fa02000000000000   | 	jle Len2
0x2f0: c0f00100000000000000 | 	iaddq $1, %rax 
                            | 
0x2fa:                      | Len2:
0x2fa: 50a70800000000000000 | 	mrmovq 8(%rdi), %r10	# read val from src...
0x304: 40a60800000000000000 | 	rmmovq %r10, 8(%rsi)	# ...and store it to dst
0x30e: 62aa                 | 	andq %r10, %r10				# val <= 0?
0x310: 712303000000000000   | 	jle Len1
0x319: c0f00100000000000000 | 	iaddq $1, %rax 
                            | 
0x323:                      | Len1:
0x323: 50a70000000000000000 | 	mrmovq (%rdi), %r10		# read val from src...
0x32d: 40a60000000000000000 | 	rmmovq %r10, (%rsi)		# ...and store it to dst
0x337: 62aa                 | 	andq %r10, %r10				# val <= 0?
0x339: 714c03000000000000   | 	jle Done
0x342: c0f00100000000000000 | 	iaddq $1, %rax 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x34c:                      | Done:
0x34c: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x34d:                      | End:
                            | #/* $end ncopy-ys */
                            | 
                            | 
0x34d:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x350:                      | 	.align 8
0x350:                      | src:
0x350: ffffffffffffffff     | 	.quad -1
0x358: feffffffffffffff     | 	.quad -2
0x360: 0300000000000000     | 	.quad 3
0x368: 0400000000000000     | 	.quad 4
0x370: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x380:                      | 	.align 16
0x380:                      | Predest:
0x380: fadebc0000000000     | 	.quad 0xbcdefa
0x388:                      | dest:
0x388: abefcd0000000000     | 	.quad 0xcdefab
0x390: abefcd0000000000     | 	.quad 0xcdefab
0x398: abefcd0000000000     | 	.quad 0xcdefab
0x3a0: abefcd0000000000     | 	.quad 0xcdefab
0x3a8:                      | Postdest:
0x3a8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x3b0:                      | .align 8
                            | # Run time stack
0x3b0: 0000000000000000     | 	.quad 0
0x3b8: 0000000000000000     | 	.quad 0
0x3c0: 0000000000000000     | 	.quad 0
0x3c8: 0000000000000000     | 	.quad 0
0x3d0: 0000000000000000     | 	.quad 0
0x3d8: 0000000000000000     | 	.quad 0
0x3e0: 0000000000000000     | 	.quad 0
0x3e8: 0000000000000000     | 	.quad 0
0x3f0: 0000000000000000     | 	.quad 0
0x3f8: 0000000000000000     | 	.quad 0
0x400: 0000000000000000     | 	.quad 0
0x408: 0000000000000000     | 	.quad 0
0x410: 0000000000000000     | 	.quad 0
0x418: 0000000000000000     | 	.quad 0
0x420: 0000000000000000     | 	.quad 0
0x428: 0000000000000000     | 	.quad 0
                            | 
0x430:                      | Stack:
